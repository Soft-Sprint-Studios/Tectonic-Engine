#version 450 core
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer HistogramBuffer {
    uint histogram[256];
};

layout(std430, binding = 1) buffer ExposureData {
    float exposureValue;
};

uniform float u_autoexposure_key;
uniform float u_autoexposure_speed;
uniform float u_deltaTime;
uniform int u_autoexposure_enabled;

const float MIN_LOG_LUM = -10.0;
const float MAX_LOG_LUM = 10.0;
const float LOG_LUM_RANGE = MAX_LOG_LUM - MIN_LOG_LUM;

float lerp_gpu(float a, float b, float f) {
    return a + f * (b - a);
}

void main()
{
    if (u_autoexposure_enabled == 0) {
        exposureValue = lerp_gpu(exposureValue, 1.0f, 1.0f - exp(-u_deltaTime * 2.0f));
        return;
    }

    float totalLuminance = 0.0;
    uint totalPixels = 0;

    for (int i = 0; i < 256; i++) {
        uint pixelCount = histogram[i];
        if (pixelCount > 0) {
            float logLuminance = MIN_LOG_LUM + (float(i) / 255.0) * LOG_LUM_RANGE;
            totalLuminance += logLuminance * float(pixelCount);
            totalPixels += pixelCount;
        }
    }

    float avgSceneLuminance;
    if (totalPixels > 0) {
        float avgLogLuminance = totalLuminance / float(totalPixels);
        avgSceneLuminance = exp2(avgLogLuminance);
    } else {
        avgSceneLuminance = 0.0001;
    }

    float targetExposure = u_autoexposure_key / (avgSceneLuminance + 0.0001f);
    targetExposure = max(0.1f, min(targetExposure, 10.0f));

    exposureValue = lerp_gpu(exposureValue, targetExposure, 1.0f - exp(-u_deltaTime * u_autoexposure_speed));
}