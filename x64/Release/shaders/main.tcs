#version 450 core
layout (vertices = 3) out;

in VS_OUT {
    vec3 worldPos;
    vec2 texCoords;
    vec2 texCoords2;
    vec2 texCoords3;
    vec2 texCoords4;
	vec2 lightmapTexCoords;
    vec3 worldNormal;
    mat3 tbn;
    vec4 color;
	vec4 color2;
	ivec4 boneIndices;
    vec4 boneWeights;
    flat int isBrush;
    float clipDist;
} tcs_in[];

out TCS_OUT {
    vec3 worldPos;
    vec2 texCoords;
    vec2 texCoords2;
    vec2 texCoords3;
    vec2 texCoords4;
	vec2 lightmapTexCoords;
    vec3 worldNormal;
    mat3 tbn;
    vec4 color;
	vec4 color2;
	ivec4 boneIndices;
    vec4 boneWeights;
    flat int isBrush;
    float clipDist;
} tcs_out[];

uniform vec3 viewPos;
uniform bool isBrush;

void main()
{
    tcs_out[gl_InvocationID].worldPos = tcs_in[gl_InvocationID].worldPos;
    tcs_out[gl_InvocationID].texCoords = tcs_in[gl_InvocationID].texCoords;
    tcs_out[gl_InvocationID].texCoords2 = tcs_in[gl_InvocationID].texCoords2;
    tcs_out[gl_InvocationID].texCoords3 = tcs_in[gl_InvocationID].texCoords3;
    tcs_out[gl_InvocationID].texCoords4 = tcs_in[gl_InvocationID].texCoords4;
	tcs_out[gl_InvocationID].lightmapTexCoords = tcs_in[gl_InvocationID].lightmapTexCoords;
    tcs_out[gl_InvocationID].worldNormal = tcs_in[gl_InvocationID].worldNormal;
    tcs_out[gl_InvocationID].tbn = tcs_in[gl_InvocationID].tbn;
    tcs_out[gl_InvocationID].color = tcs_in[gl_InvocationID].color;
	tcs_out[gl_InvocationID].color2 = tcs_in[gl_InvocationID].color2;
	tcs_out[gl_InvocationID].boneIndices = tcs_in[gl_InvocationID].boneIndices;
    tcs_out[gl_InvocationID].boneWeights = tcs_in[gl_InvocationID].boneWeights;
    tcs_out[gl_InvocationID].isBrush = tcs_in[gl_InvocationID].isBrush;
    tcs_out[gl_InvocationID].clipDist = tcs_in[gl_InvocationID].clipDist;

    gl_TessLevelOuter[0] = 1.0;
    gl_TessLevelOuter[1] = 1.0;
    gl_TessLevelOuter[2] = 1.0;
    gl_TessLevelInner[0] = 1.0;
}